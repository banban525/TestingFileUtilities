<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ output extension=".cs" #>
<#
            var methods = typeof(System.IO.File).GetMethods(BindingFlags.Public | BindingFlags.Static)
                .Where(method => method.GetParameters().FirstOrDefault()?.ParameterType == typeof(string));

            var methodList = new List<Tuple<MethodInfo>>();

            foreach (var methodInfo in methods)
            {
                var parameters = methodInfo.GetParameters();
                if (parameters.FirstOrDefault()?.ParameterType != typeof(string))
                {
                    continue;
                }

                if (parameters.Any(_ => _.ParameterType.Namespace?.Contains("System.Security.AccessControl") ?? true))
                {
                    continue;
                }

                if (methodInfo.ReturnType.Namespace?.Contains("System.Security.AccessControl") ?? true)
                {
                    continue;
                }

                if (methodInfo.IsGenericMethod)
                {
                    continue;
                }
                methodList.Add(new Tuple<MethodInfo>(methodInfo));

            }
            
    
            Func<MethodInfo, string> GetParameterDef = info =>
                string.Join(",", info.GetParameters().Skip(1).Select(_ => $"{GetCsharpTypeName(_.ParameterType)} {_.Name}"));
            Func<MethodInfo, string> GetParameterCall = info =>
                "_fullPath"+string.Join("", info.GetParameters().Skip(1).Select(_ => $", {_.Name}"));
            Func<MethodInfo, string> GetReturnType = info =>
                GetCsharpTypeName(info.ReturnType);



#>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
 
using System;
using System.IO;
using System.Collections.Generic;
using System.Text;

namespace TestingFileUtilities
{
    public partial interface IPhysicalFile
    {
<# foreach(var methodInfo in methodList) { #>

        <#= GetReturnType(methodInfo.Item1) #> <#= methodInfo.Item1.Name #>(<#= GetParameterDef(methodInfo.Item1) #>);
<# } #>
        FileInfo FileInfo { get; }
    }
    public partial class PhysicalFile
    {
<# foreach(var methodInfo in methodList) { #>

        <#= GetReturnType(methodInfo.Item1) #> IPhysicalFile.<#= methodInfo.Item1.Name #>(<#= GetParameterDef(methodInfo.Item1) #>)
        {
            <#= methodInfo.Item1.ReturnType != typeof(void) ?"return ":"" #>File.<#= methodInfo.Item1.Name #>(<#= GetParameterCall(methodInfo.Item1) #>);
        }
<# } #>
        FileInfo IPhysicalFile.FileInfo => new FileInfo(_fullPath);
    }

    public abstract partial class ArchivedFile<T>
    {
<# foreach(var methodInfo in methodList) { #>

        <#= GetReturnType(methodInfo.Item1) #> IPhysicalFile.<#= methodInfo.Item1.Name #>(<#= GetParameterDef(methodInfo.Item1) #>)
        {
            <#= methodInfo.Item1.ReturnType != typeof(void) ?"return ":"" #>File.<#= methodInfo.Item1.Name #>(<#= GetParameterCall(methodInfo.Item1) #>);
        }
<# } #>
        FileInfo IPhysicalFile.FileInfo => new FileInfo(_fullPath);
    }

    public partial class TextFile
    {
<# foreach(var methodInfo in methodList) { #>

        <#= GetReturnType(methodInfo.Item1) #> IPhysicalFile.<#= methodInfo.Item1.Name #>(<#= GetParameterDef(methodInfo.Item1) #>)
        {
            <#= methodInfo.Item1.ReturnType != typeof(void) ?"return ":"" #>File.<#= methodInfo.Item1.Name #>(<#= GetParameterCall(methodInfo.Item1) #>);
        }
<# } #>
        FileInfo IPhysicalFile.FileInfo => new FileInfo(_fullPath);
    }

    public partial class BinaryFile
    {
<# foreach(var methodInfo in methodList) { #>

        <#= GetReturnType(methodInfo.Item1) #> IPhysicalFile.<#= methodInfo.Item1.Name #>(<#= GetParameterDef(methodInfo.Item1) #>)
        {
            <#= methodInfo.Item1.ReturnType != typeof(void) ?"return ":"" #>File.<#= methodInfo.Item1.Name #>(<#= GetParameterCall(methodInfo.Item1) #>);
        }
<# } #>
        FileInfo IPhysicalFile.FileInfo => new FileInfo(_fullPath);
    }

    public partial class Empty
    {
<# foreach(var methodInfo in methodList) { #>

        <#= GetReturnType(methodInfo.Item1) #> IPhysicalFile.<#= methodInfo.Item1.Name #>(<#= GetParameterDef(methodInfo.Item1) #>)
        {
            <#= methodInfo.Item1.ReturnType != typeof(void) ?"return ":"" #>File.<#= methodInfo.Item1.Name #>(<#= GetParameterCall(methodInfo.Item1) #>);
        }
<# } #>
        FileInfo IPhysicalFile.FileInfo => new FileInfo(_fullPath);
    }
}

<#+
        public string GetCsharpTypeName(Type type)
        {
            if (type == typeof(void))
            {
                return "void";
            }
            if (!type.IsGenericType)
            {
                return type.Name;
            }

            var name = type.Name;
            name = type.Name.Substring(0, name.IndexOf('`'));
            var genericTypes = string.Join(",",
                type.GetGenericArguments()
                    .Select(GetCsharpTypeName));

            return $"{name}<{genericTypes}>";
        }
#>