// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
 
using System;
using System.IO;
using System.Collections.Generic;
using System.Text;

namespace TestingFileUtilities
{
    public partial interface IPhysicalFile
    {

        StreamReader OpenText();

        StreamWriter CreateText();

        StreamWriter AppendText();

        void Copy(String destFileName);

        void Copy(String destFileName,Boolean overwrite);

        FileStream Create();

        FileStream Create(Int32 bufferSize);

        FileStream Create(Int32 bufferSize,FileOptions options);

        void Delete();

        Boolean Exists();

        FileStream Open(FileMode mode);

        FileStream Open(FileMode mode,FileAccess access);

        FileStream Open(FileMode mode,FileAccess access,FileShare share);

        void SetCreationTime(DateTime creationTime);

        void SetCreationTimeUtc(DateTime creationTimeUtc);

        DateTime GetCreationTime();

        DateTime GetCreationTimeUtc();

        void SetLastAccessTime(DateTime lastAccessTime);

        void SetLastAccessTimeUtc(DateTime lastAccessTimeUtc);

        DateTime GetLastAccessTime();

        DateTime GetLastAccessTimeUtc();

        void SetLastWriteTime(DateTime lastWriteTime);

        void SetLastWriteTimeUtc(DateTime lastWriteTimeUtc);

        DateTime GetLastWriteTime();

        DateTime GetLastWriteTimeUtc();

        FileAttributes GetAttributes();

        void SetAttributes(FileAttributes fileAttributes);

        FileStream OpenRead();

        FileStream OpenWrite();

        String ReadAllText();

        String ReadAllText(Encoding encoding);

        void WriteAllText(String contents);

        void WriteAllText(String contents,Encoding encoding);

        Byte[] ReadAllBytes();

        void WriteAllBytes(Byte[] bytes);

        String[] ReadAllLines();

        String[] ReadAllLines(Encoding encoding);

        IEnumerable<String> ReadLines();

        IEnumerable<String> ReadLines(Encoding encoding);

        void WriteAllLines(String[] contents);

        void WriteAllLines(String[] contents,Encoding encoding);

        void WriteAllLines(IEnumerable<String> contents);

        void WriteAllLines(IEnumerable<String> contents,Encoding encoding);

        void AppendAllText(String contents);

        void AppendAllText(String contents,Encoding encoding);

        void AppendAllLines(IEnumerable<String> contents);

        void AppendAllLines(IEnumerable<String> contents,Encoding encoding);

        void Move(String destFileName);

        void Replace(String destinationFileName,String destinationBackupFileName);

        void Replace(String destinationFileName,String destinationBackupFileName,Boolean ignoreMetadataErrors);

        void Decrypt();

        void Encrypt();
        FileInfo FileInfo { get; }
    }
    public partial class PhysicalFile
    {

        StreamReader IPhysicalFile.OpenText()
        {
            return File.OpenText(_fullPath);
        }

        StreamWriter IPhysicalFile.CreateText()
        {
            return File.CreateText(_fullPath);
        }

        StreamWriter IPhysicalFile.AppendText()
        {
            return File.AppendText(_fullPath);
        }

        void IPhysicalFile.Copy(String destFileName)
        {
            File.Copy(_fullPath, destFileName);
        }

        void IPhysicalFile.Copy(String destFileName,Boolean overwrite)
        {
            File.Copy(_fullPath, destFileName, overwrite);
        }

        FileStream IPhysicalFile.Create()
        {
            return File.Create(_fullPath);
        }

        FileStream IPhysicalFile.Create(Int32 bufferSize)
        {
            return File.Create(_fullPath, bufferSize);
        }

        FileStream IPhysicalFile.Create(Int32 bufferSize,FileOptions options)
        {
            return File.Create(_fullPath, bufferSize, options);
        }

        void IPhysicalFile.Delete()
        {
            File.Delete(_fullPath);
        }

        Boolean IPhysicalFile.Exists()
        {
            return File.Exists(_fullPath);
        }

        FileStream IPhysicalFile.Open(FileMode mode)
        {
            return File.Open(_fullPath, mode);
        }

        FileStream IPhysicalFile.Open(FileMode mode,FileAccess access)
        {
            return File.Open(_fullPath, mode, access);
        }

        FileStream IPhysicalFile.Open(FileMode mode,FileAccess access,FileShare share)
        {
            return File.Open(_fullPath, mode, access, share);
        }

        void IPhysicalFile.SetCreationTime(DateTime creationTime)
        {
            File.SetCreationTime(_fullPath, creationTime);
        }

        void IPhysicalFile.SetCreationTimeUtc(DateTime creationTimeUtc)
        {
            File.SetCreationTimeUtc(_fullPath, creationTimeUtc);
        }

        DateTime IPhysicalFile.GetCreationTime()
        {
            return File.GetCreationTime(_fullPath);
        }

        DateTime IPhysicalFile.GetCreationTimeUtc()
        {
            return File.GetCreationTimeUtc(_fullPath);
        }

        void IPhysicalFile.SetLastAccessTime(DateTime lastAccessTime)
        {
            File.SetLastAccessTime(_fullPath, lastAccessTime);
        }

        void IPhysicalFile.SetLastAccessTimeUtc(DateTime lastAccessTimeUtc)
        {
            File.SetLastAccessTimeUtc(_fullPath, lastAccessTimeUtc);
        }

        DateTime IPhysicalFile.GetLastAccessTime()
        {
            return File.GetLastAccessTime(_fullPath);
        }

        DateTime IPhysicalFile.GetLastAccessTimeUtc()
        {
            return File.GetLastAccessTimeUtc(_fullPath);
        }

        void IPhysicalFile.SetLastWriteTime(DateTime lastWriteTime)
        {
            File.SetLastWriteTime(_fullPath, lastWriteTime);
        }

        void IPhysicalFile.SetLastWriteTimeUtc(DateTime lastWriteTimeUtc)
        {
            File.SetLastWriteTimeUtc(_fullPath, lastWriteTimeUtc);
        }

        DateTime IPhysicalFile.GetLastWriteTime()
        {
            return File.GetLastWriteTime(_fullPath);
        }

        DateTime IPhysicalFile.GetLastWriteTimeUtc()
        {
            return File.GetLastWriteTimeUtc(_fullPath);
        }

        FileAttributes IPhysicalFile.GetAttributes()
        {
            return File.GetAttributes(_fullPath);
        }

        void IPhysicalFile.SetAttributes(FileAttributes fileAttributes)
        {
            File.SetAttributes(_fullPath, fileAttributes);
        }

        FileStream IPhysicalFile.OpenRead()
        {
            return File.OpenRead(_fullPath);
        }

        FileStream IPhysicalFile.OpenWrite()
        {
            return File.OpenWrite(_fullPath);
        }

        String IPhysicalFile.ReadAllText()
        {
            return File.ReadAllText(_fullPath);
        }

        String IPhysicalFile.ReadAllText(Encoding encoding)
        {
            return File.ReadAllText(_fullPath, encoding);
        }

        void IPhysicalFile.WriteAllText(String contents)
        {
            File.WriteAllText(_fullPath, contents);
        }

        void IPhysicalFile.WriteAllText(String contents,Encoding encoding)
        {
            File.WriteAllText(_fullPath, contents, encoding);
        }

        Byte[] IPhysicalFile.ReadAllBytes()
        {
            return File.ReadAllBytes(_fullPath);
        }

        void IPhysicalFile.WriteAllBytes(Byte[] bytes)
        {
            File.WriteAllBytes(_fullPath, bytes);
        }

        String[] IPhysicalFile.ReadAllLines()
        {
            return File.ReadAllLines(_fullPath);
        }

        String[] IPhysicalFile.ReadAllLines(Encoding encoding)
        {
            return File.ReadAllLines(_fullPath, encoding);
        }

        IEnumerable<String> IPhysicalFile.ReadLines()
        {
            return File.ReadLines(_fullPath);
        }

        IEnumerable<String> IPhysicalFile.ReadLines(Encoding encoding)
        {
            return File.ReadLines(_fullPath, encoding);
        }

        void IPhysicalFile.WriteAllLines(String[] contents)
        {
            File.WriteAllLines(_fullPath, contents);
        }

        void IPhysicalFile.WriteAllLines(String[] contents,Encoding encoding)
        {
            File.WriteAllLines(_fullPath, contents, encoding);
        }

        void IPhysicalFile.WriteAllLines(IEnumerable<String> contents)
        {
            File.WriteAllLines(_fullPath, contents);
        }

        void IPhysicalFile.WriteAllLines(IEnumerable<String> contents,Encoding encoding)
        {
            File.WriteAllLines(_fullPath, contents, encoding);
        }

        void IPhysicalFile.AppendAllText(String contents)
        {
            File.AppendAllText(_fullPath, contents);
        }

        void IPhysicalFile.AppendAllText(String contents,Encoding encoding)
        {
            File.AppendAllText(_fullPath, contents, encoding);
        }

        void IPhysicalFile.AppendAllLines(IEnumerable<String> contents)
        {
            File.AppendAllLines(_fullPath, contents);
        }

        void IPhysicalFile.AppendAllLines(IEnumerable<String> contents,Encoding encoding)
        {
            File.AppendAllLines(_fullPath, contents, encoding);
        }

        void IPhysicalFile.Move(String destFileName)
        {
            File.Move(_fullPath, destFileName);
        }

        void IPhysicalFile.Replace(String destinationFileName,String destinationBackupFileName)
        {
            File.Replace(_fullPath, destinationFileName, destinationBackupFileName);
        }

        void IPhysicalFile.Replace(String destinationFileName,String destinationBackupFileName,Boolean ignoreMetadataErrors)
        {
            File.Replace(_fullPath, destinationFileName, destinationBackupFileName, ignoreMetadataErrors);
        }

        void IPhysicalFile.Decrypt()
        {
            File.Decrypt(_fullPath);
        }

        void IPhysicalFile.Encrypt()
        {
            File.Encrypt(_fullPath);
        }
        FileInfo IPhysicalFile.FileInfo => new FileInfo(_fullPath);
    }

    public abstract partial class ArchivedFile<T>
    {

        StreamReader IPhysicalFile.OpenText()
        {
            return File.OpenText(_fullPath);
        }

        StreamWriter IPhysicalFile.CreateText()
        {
            return File.CreateText(_fullPath);
        }

        StreamWriter IPhysicalFile.AppendText()
        {
            return File.AppendText(_fullPath);
        }

        void IPhysicalFile.Copy(String destFileName)
        {
            File.Copy(_fullPath, destFileName);
        }

        void IPhysicalFile.Copy(String destFileName,Boolean overwrite)
        {
            File.Copy(_fullPath, destFileName, overwrite);
        }

        FileStream IPhysicalFile.Create()
        {
            return File.Create(_fullPath);
        }

        FileStream IPhysicalFile.Create(Int32 bufferSize)
        {
            return File.Create(_fullPath, bufferSize);
        }

        FileStream IPhysicalFile.Create(Int32 bufferSize,FileOptions options)
        {
            return File.Create(_fullPath, bufferSize, options);
        }

        void IPhysicalFile.Delete()
        {
            File.Delete(_fullPath);
        }

        Boolean IPhysicalFile.Exists()
        {
            return File.Exists(_fullPath);
        }

        FileStream IPhysicalFile.Open(FileMode mode)
        {
            return File.Open(_fullPath, mode);
        }

        FileStream IPhysicalFile.Open(FileMode mode,FileAccess access)
        {
            return File.Open(_fullPath, mode, access);
        }

        FileStream IPhysicalFile.Open(FileMode mode,FileAccess access,FileShare share)
        {
            return File.Open(_fullPath, mode, access, share);
        }

        void IPhysicalFile.SetCreationTime(DateTime creationTime)
        {
            File.SetCreationTime(_fullPath, creationTime);
        }

        void IPhysicalFile.SetCreationTimeUtc(DateTime creationTimeUtc)
        {
            File.SetCreationTimeUtc(_fullPath, creationTimeUtc);
        }

        DateTime IPhysicalFile.GetCreationTime()
        {
            return File.GetCreationTime(_fullPath);
        }

        DateTime IPhysicalFile.GetCreationTimeUtc()
        {
            return File.GetCreationTimeUtc(_fullPath);
        }

        void IPhysicalFile.SetLastAccessTime(DateTime lastAccessTime)
        {
            File.SetLastAccessTime(_fullPath, lastAccessTime);
        }

        void IPhysicalFile.SetLastAccessTimeUtc(DateTime lastAccessTimeUtc)
        {
            File.SetLastAccessTimeUtc(_fullPath, lastAccessTimeUtc);
        }

        DateTime IPhysicalFile.GetLastAccessTime()
        {
            return File.GetLastAccessTime(_fullPath);
        }

        DateTime IPhysicalFile.GetLastAccessTimeUtc()
        {
            return File.GetLastAccessTimeUtc(_fullPath);
        }

        void IPhysicalFile.SetLastWriteTime(DateTime lastWriteTime)
        {
            File.SetLastWriteTime(_fullPath, lastWriteTime);
        }

        void IPhysicalFile.SetLastWriteTimeUtc(DateTime lastWriteTimeUtc)
        {
            File.SetLastWriteTimeUtc(_fullPath, lastWriteTimeUtc);
        }

        DateTime IPhysicalFile.GetLastWriteTime()
        {
            return File.GetLastWriteTime(_fullPath);
        }

        DateTime IPhysicalFile.GetLastWriteTimeUtc()
        {
            return File.GetLastWriteTimeUtc(_fullPath);
        }

        FileAttributes IPhysicalFile.GetAttributes()
        {
            return File.GetAttributes(_fullPath);
        }

        void IPhysicalFile.SetAttributes(FileAttributes fileAttributes)
        {
            File.SetAttributes(_fullPath, fileAttributes);
        }

        FileStream IPhysicalFile.OpenRead()
        {
            return File.OpenRead(_fullPath);
        }

        FileStream IPhysicalFile.OpenWrite()
        {
            return File.OpenWrite(_fullPath);
        }

        String IPhysicalFile.ReadAllText()
        {
            return File.ReadAllText(_fullPath);
        }

        String IPhysicalFile.ReadAllText(Encoding encoding)
        {
            return File.ReadAllText(_fullPath, encoding);
        }

        void IPhysicalFile.WriteAllText(String contents)
        {
            File.WriteAllText(_fullPath, contents);
        }

        void IPhysicalFile.WriteAllText(String contents,Encoding encoding)
        {
            File.WriteAllText(_fullPath, contents, encoding);
        }

        Byte[] IPhysicalFile.ReadAllBytes()
        {
            return File.ReadAllBytes(_fullPath);
        }

        void IPhysicalFile.WriteAllBytes(Byte[] bytes)
        {
            File.WriteAllBytes(_fullPath, bytes);
        }

        String[] IPhysicalFile.ReadAllLines()
        {
            return File.ReadAllLines(_fullPath);
        }

        String[] IPhysicalFile.ReadAllLines(Encoding encoding)
        {
            return File.ReadAllLines(_fullPath, encoding);
        }

        IEnumerable<String> IPhysicalFile.ReadLines()
        {
            return File.ReadLines(_fullPath);
        }

        IEnumerable<String> IPhysicalFile.ReadLines(Encoding encoding)
        {
            return File.ReadLines(_fullPath, encoding);
        }

        void IPhysicalFile.WriteAllLines(String[] contents)
        {
            File.WriteAllLines(_fullPath, contents);
        }

        void IPhysicalFile.WriteAllLines(String[] contents,Encoding encoding)
        {
            File.WriteAllLines(_fullPath, contents, encoding);
        }

        void IPhysicalFile.WriteAllLines(IEnumerable<String> contents)
        {
            File.WriteAllLines(_fullPath, contents);
        }

        void IPhysicalFile.WriteAllLines(IEnumerable<String> contents,Encoding encoding)
        {
            File.WriteAllLines(_fullPath, contents, encoding);
        }

        void IPhysicalFile.AppendAllText(String contents)
        {
            File.AppendAllText(_fullPath, contents);
        }

        void IPhysicalFile.AppendAllText(String contents,Encoding encoding)
        {
            File.AppendAllText(_fullPath, contents, encoding);
        }

        void IPhysicalFile.AppendAllLines(IEnumerable<String> contents)
        {
            File.AppendAllLines(_fullPath, contents);
        }

        void IPhysicalFile.AppendAllLines(IEnumerable<String> contents,Encoding encoding)
        {
            File.AppendAllLines(_fullPath, contents, encoding);
        }

        void IPhysicalFile.Move(String destFileName)
        {
            File.Move(_fullPath, destFileName);
        }

        void IPhysicalFile.Replace(String destinationFileName,String destinationBackupFileName)
        {
            File.Replace(_fullPath, destinationFileName, destinationBackupFileName);
        }

        void IPhysicalFile.Replace(String destinationFileName,String destinationBackupFileName,Boolean ignoreMetadataErrors)
        {
            File.Replace(_fullPath, destinationFileName, destinationBackupFileName, ignoreMetadataErrors);
        }

        void IPhysicalFile.Decrypt()
        {
            File.Decrypt(_fullPath);
        }

        void IPhysicalFile.Encrypt()
        {
            File.Encrypt(_fullPath);
        }
        FileInfo IPhysicalFile.FileInfo => new FileInfo(_fullPath);
    }

    public partial class TextFile
    {

        StreamReader IPhysicalFile.OpenText()
        {
            return File.OpenText(_fullPath);
        }

        StreamWriter IPhysicalFile.CreateText()
        {
            return File.CreateText(_fullPath);
        }

        StreamWriter IPhysicalFile.AppendText()
        {
            return File.AppendText(_fullPath);
        }

        void IPhysicalFile.Copy(String destFileName)
        {
            File.Copy(_fullPath, destFileName);
        }

        void IPhysicalFile.Copy(String destFileName,Boolean overwrite)
        {
            File.Copy(_fullPath, destFileName, overwrite);
        }

        FileStream IPhysicalFile.Create()
        {
            return File.Create(_fullPath);
        }

        FileStream IPhysicalFile.Create(Int32 bufferSize)
        {
            return File.Create(_fullPath, bufferSize);
        }

        FileStream IPhysicalFile.Create(Int32 bufferSize,FileOptions options)
        {
            return File.Create(_fullPath, bufferSize, options);
        }

        void IPhysicalFile.Delete()
        {
            File.Delete(_fullPath);
        }

        Boolean IPhysicalFile.Exists()
        {
            return File.Exists(_fullPath);
        }

        FileStream IPhysicalFile.Open(FileMode mode)
        {
            return File.Open(_fullPath, mode);
        }

        FileStream IPhysicalFile.Open(FileMode mode,FileAccess access)
        {
            return File.Open(_fullPath, mode, access);
        }

        FileStream IPhysicalFile.Open(FileMode mode,FileAccess access,FileShare share)
        {
            return File.Open(_fullPath, mode, access, share);
        }

        void IPhysicalFile.SetCreationTime(DateTime creationTime)
        {
            File.SetCreationTime(_fullPath, creationTime);
        }

        void IPhysicalFile.SetCreationTimeUtc(DateTime creationTimeUtc)
        {
            File.SetCreationTimeUtc(_fullPath, creationTimeUtc);
        }

        DateTime IPhysicalFile.GetCreationTime()
        {
            return File.GetCreationTime(_fullPath);
        }

        DateTime IPhysicalFile.GetCreationTimeUtc()
        {
            return File.GetCreationTimeUtc(_fullPath);
        }

        void IPhysicalFile.SetLastAccessTime(DateTime lastAccessTime)
        {
            File.SetLastAccessTime(_fullPath, lastAccessTime);
        }

        void IPhysicalFile.SetLastAccessTimeUtc(DateTime lastAccessTimeUtc)
        {
            File.SetLastAccessTimeUtc(_fullPath, lastAccessTimeUtc);
        }

        DateTime IPhysicalFile.GetLastAccessTime()
        {
            return File.GetLastAccessTime(_fullPath);
        }

        DateTime IPhysicalFile.GetLastAccessTimeUtc()
        {
            return File.GetLastAccessTimeUtc(_fullPath);
        }

        void IPhysicalFile.SetLastWriteTime(DateTime lastWriteTime)
        {
            File.SetLastWriteTime(_fullPath, lastWriteTime);
        }

        void IPhysicalFile.SetLastWriteTimeUtc(DateTime lastWriteTimeUtc)
        {
            File.SetLastWriteTimeUtc(_fullPath, lastWriteTimeUtc);
        }

        DateTime IPhysicalFile.GetLastWriteTime()
        {
            return File.GetLastWriteTime(_fullPath);
        }

        DateTime IPhysicalFile.GetLastWriteTimeUtc()
        {
            return File.GetLastWriteTimeUtc(_fullPath);
        }

        FileAttributes IPhysicalFile.GetAttributes()
        {
            return File.GetAttributes(_fullPath);
        }

        void IPhysicalFile.SetAttributes(FileAttributes fileAttributes)
        {
            File.SetAttributes(_fullPath, fileAttributes);
        }

        FileStream IPhysicalFile.OpenRead()
        {
            return File.OpenRead(_fullPath);
        }

        FileStream IPhysicalFile.OpenWrite()
        {
            return File.OpenWrite(_fullPath);
        }

        String IPhysicalFile.ReadAllText()
        {
            return File.ReadAllText(_fullPath);
        }

        String IPhysicalFile.ReadAllText(Encoding encoding)
        {
            return File.ReadAllText(_fullPath, encoding);
        }

        void IPhysicalFile.WriteAllText(String contents)
        {
            File.WriteAllText(_fullPath, contents);
        }

        void IPhysicalFile.WriteAllText(String contents,Encoding encoding)
        {
            File.WriteAllText(_fullPath, contents, encoding);
        }

        Byte[] IPhysicalFile.ReadAllBytes()
        {
            return File.ReadAllBytes(_fullPath);
        }

        void IPhysicalFile.WriteAllBytes(Byte[] bytes)
        {
            File.WriteAllBytes(_fullPath, bytes);
        }

        String[] IPhysicalFile.ReadAllLines()
        {
            return File.ReadAllLines(_fullPath);
        }

        String[] IPhysicalFile.ReadAllLines(Encoding encoding)
        {
            return File.ReadAllLines(_fullPath, encoding);
        }

        IEnumerable<String> IPhysicalFile.ReadLines()
        {
            return File.ReadLines(_fullPath);
        }

        IEnumerable<String> IPhysicalFile.ReadLines(Encoding encoding)
        {
            return File.ReadLines(_fullPath, encoding);
        }

        void IPhysicalFile.WriteAllLines(String[] contents)
        {
            File.WriteAllLines(_fullPath, contents);
        }

        void IPhysicalFile.WriteAllLines(String[] contents,Encoding encoding)
        {
            File.WriteAllLines(_fullPath, contents, encoding);
        }

        void IPhysicalFile.WriteAllLines(IEnumerable<String> contents)
        {
            File.WriteAllLines(_fullPath, contents);
        }

        void IPhysicalFile.WriteAllLines(IEnumerable<String> contents,Encoding encoding)
        {
            File.WriteAllLines(_fullPath, contents, encoding);
        }

        void IPhysicalFile.AppendAllText(String contents)
        {
            File.AppendAllText(_fullPath, contents);
        }

        void IPhysicalFile.AppendAllText(String contents,Encoding encoding)
        {
            File.AppendAllText(_fullPath, contents, encoding);
        }

        void IPhysicalFile.AppendAllLines(IEnumerable<String> contents)
        {
            File.AppendAllLines(_fullPath, contents);
        }

        void IPhysicalFile.AppendAllLines(IEnumerable<String> contents,Encoding encoding)
        {
            File.AppendAllLines(_fullPath, contents, encoding);
        }

        void IPhysicalFile.Move(String destFileName)
        {
            File.Move(_fullPath, destFileName);
        }

        void IPhysicalFile.Replace(String destinationFileName,String destinationBackupFileName)
        {
            File.Replace(_fullPath, destinationFileName, destinationBackupFileName);
        }

        void IPhysicalFile.Replace(String destinationFileName,String destinationBackupFileName,Boolean ignoreMetadataErrors)
        {
            File.Replace(_fullPath, destinationFileName, destinationBackupFileName, ignoreMetadataErrors);
        }

        void IPhysicalFile.Decrypt()
        {
            File.Decrypt(_fullPath);
        }

        void IPhysicalFile.Encrypt()
        {
            File.Encrypt(_fullPath);
        }
        FileInfo IPhysicalFile.FileInfo => new FileInfo(_fullPath);
    }

    public partial class BinaryFile
    {

        StreamReader IPhysicalFile.OpenText()
        {
            return File.OpenText(_fullPath);
        }

        StreamWriter IPhysicalFile.CreateText()
        {
            return File.CreateText(_fullPath);
        }

        StreamWriter IPhysicalFile.AppendText()
        {
            return File.AppendText(_fullPath);
        }

        void IPhysicalFile.Copy(String destFileName)
        {
            File.Copy(_fullPath, destFileName);
        }

        void IPhysicalFile.Copy(String destFileName,Boolean overwrite)
        {
            File.Copy(_fullPath, destFileName, overwrite);
        }

        FileStream IPhysicalFile.Create()
        {
            return File.Create(_fullPath);
        }

        FileStream IPhysicalFile.Create(Int32 bufferSize)
        {
            return File.Create(_fullPath, bufferSize);
        }

        FileStream IPhysicalFile.Create(Int32 bufferSize,FileOptions options)
        {
            return File.Create(_fullPath, bufferSize, options);
        }

        void IPhysicalFile.Delete()
        {
            File.Delete(_fullPath);
        }

        Boolean IPhysicalFile.Exists()
        {
            return File.Exists(_fullPath);
        }

        FileStream IPhysicalFile.Open(FileMode mode)
        {
            return File.Open(_fullPath, mode);
        }

        FileStream IPhysicalFile.Open(FileMode mode,FileAccess access)
        {
            return File.Open(_fullPath, mode, access);
        }

        FileStream IPhysicalFile.Open(FileMode mode,FileAccess access,FileShare share)
        {
            return File.Open(_fullPath, mode, access, share);
        }

        void IPhysicalFile.SetCreationTime(DateTime creationTime)
        {
            File.SetCreationTime(_fullPath, creationTime);
        }

        void IPhysicalFile.SetCreationTimeUtc(DateTime creationTimeUtc)
        {
            File.SetCreationTimeUtc(_fullPath, creationTimeUtc);
        }

        DateTime IPhysicalFile.GetCreationTime()
        {
            return File.GetCreationTime(_fullPath);
        }

        DateTime IPhysicalFile.GetCreationTimeUtc()
        {
            return File.GetCreationTimeUtc(_fullPath);
        }

        void IPhysicalFile.SetLastAccessTime(DateTime lastAccessTime)
        {
            File.SetLastAccessTime(_fullPath, lastAccessTime);
        }

        void IPhysicalFile.SetLastAccessTimeUtc(DateTime lastAccessTimeUtc)
        {
            File.SetLastAccessTimeUtc(_fullPath, lastAccessTimeUtc);
        }

        DateTime IPhysicalFile.GetLastAccessTime()
        {
            return File.GetLastAccessTime(_fullPath);
        }

        DateTime IPhysicalFile.GetLastAccessTimeUtc()
        {
            return File.GetLastAccessTimeUtc(_fullPath);
        }

        void IPhysicalFile.SetLastWriteTime(DateTime lastWriteTime)
        {
            File.SetLastWriteTime(_fullPath, lastWriteTime);
        }

        void IPhysicalFile.SetLastWriteTimeUtc(DateTime lastWriteTimeUtc)
        {
            File.SetLastWriteTimeUtc(_fullPath, lastWriteTimeUtc);
        }

        DateTime IPhysicalFile.GetLastWriteTime()
        {
            return File.GetLastWriteTime(_fullPath);
        }

        DateTime IPhysicalFile.GetLastWriteTimeUtc()
        {
            return File.GetLastWriteTimeUtc(_fullPath);
        }

        FileAttributes IPhysicalFile.GetAttributes()
        {
            return File.GetAttributes(_fullPath);
        }

        void IPhysicalFile.SetAttributes(FileAttributes fileAttributes)
        {
            File.SetAttributes(_fullPath, fileAttributes);
        }

        FileStream IPhysicalFile.OpenRead()
        {
            return File.OpenRead(_fullPath);
        }

        FileStream IPhysicalFile.OpenWrite()
        {
            return File.OpenWrite(_fullPath);
        }

        String IPhysicalFile.ReadAllText()
        {
            return File.ReadAllText(_fullPath);
        }

        String IPhysicalFile.ReadAllText(Encoding encoding)
        {
            return File.ReadAllText(_fullPath, encoding);
        }

        void IPhysicalFile.WriteAllText(String contents)
        {
            File.WriteAllText(_fullPath, contents);
        }

        void IPhysicalFile.WriteAllText(String contents,Encoding encoding)
        {
            File.WriteAllText(_fullPath, contents, encoding);
        }

        Byte[] IPhysicalFile.ReadAllBytes()
        {
            return File.ReadAllBytes(_fullPath);
        }

        void IPhysicalFile.WriteAllBytes(Byte[] bytes)
        {
            File.WriteAllBytes(_fullPath, bytes);
        }

        String[] IPhysicalFile.ReadAllLines()
        {
            return File.ReadAllLines(_fullPath);
        }

        String[] IPhysicalFile.ReadAllLines(Encoding encoding)
        {
            return File.ReadAllLines(_fullPath, encoding);
        }

        IEnumerable<String> IPhysicalFile.ReadLines()
        {
            return File.ReadLines(_fullPath);
        }

        IEnumerable<String> IPhysicalFile.ReadLines(Encoding encoding)
        {
            return File.ReadLines(_fullPath, encoding);
        }

        void IPhysicalFile.WriteAllLines(String[] contents)
        {
            File.WriteAllLines(_fullPath, contents);
        }

        void IPhysicalFile.WriteAllLines(String[] contents,Encoding encoding)
        {
            File.WriteAllLines(_fullPath, contents, encoding);
        }

        void IPhysicalFile.WriteAllLines(IEnumerable<String> contents)
        {
            File.WriteAllLines(_fullPath, contents);
        }

        void IPhysicalFile.WriteAllLines(IEnumerable<String> contents,Encoding encoding)
        {
            File.WriteAllLines(_fullPath, contents, encoding);
        }

        void IPhysicalFile.AppendAllText(String contents)
        {
            File.AppendAllText(_fullPath, contents);
        }

        void IPhysicalFile.AppendAllText(String contents,Encoding encoding)
        {
            File.AppendAllText(_fullPath, contents, encoding);
        }

        void IPhysicalFile.AppendAllLines(IEnumerable<String> contents)
        {
            File.AppendAllLines(_fullPath, contents);
        }

        void IPhysicalFile.AppendAllLines(IEnumerable<String> contents,Encoding encoding)
        {
            File.AppendAllLines(_fullPath, contents, encoding);
        }

        void IPhysicalFile.Move(String destFileName)
        {
            File.Move(_fullPath, destFileName);
        }

        void IPhysicalFile.Replace(String destinationFileName,String destinationBackupFileName)
        {
            File.Replace(_fullPath, destinationFileName, destinationBackupFileName);
        }

        void IPhysicalFile.Replace(String destinationFileName,String destinationBackupFileName,Boolean ignoreMetadataErrors)
        {
            File.Replace(_fullPath, destinationFileName, destinationBackupFileName, ignoreMetadataErrors);
        }

        void IPhysicalFile.Decrypt()
        {
            File.Decrypt(_fullPath);
        }

        void IPhysicalFile.Encrypt()
        {
            File.Encrypt(_fullPath);
        }
        FileInfo IPhysicalFile.FileInfo => new FileInfo(_fullPath);
    }

    public partial class Empty
    {

        StreamReader IPhysicalFile.OpenText()
        {
            return File.OpenText(_fullPath);
        }

        StreamWriter IPhysicalFile.CreateText()
        {
            return File.CreateText(_fullPath);
        }

        StreamWriter IPhysicalFile.AppendText()
        {
            return File.AppendText(_fullPath);
        }

        void IPhysicalFile.Copy(String destFileName)
        {
            File.Copy(_fullPath, destFileName);
        }

        void IPhysicalFile.Copy(String destFileName,Boolean overwrite)
        {
            File.Copy(_fullPath, destFileName, overwrite);
        }

        FileStream IPhysicalFile.Create()
        {
            return File.Create(_fullPath);
        }

        FileStream IPhysicalFile.Create(Int32 bufferSize)
        {
            return File.Create(_fullPath, bufferSize);
        }

        FileStream IPhysicalFile.Create(Int32 bufferSize,FileOptions options)
        {
            return File.Create(_fullPath, bufferSize, options);
        }

        void IPhysicalFile.Delete()
        {
            File.Delete(_fullPath);
        }

        Boolean IPhysicalFile.Exists()
        {
            return File.Exists(_fullPath);
        }

        FileStream IPhysicalFile.Open(FileMode mode)
        {
            return File.Open(_fullPath, mode);
        }

        FileStream IPhysicalFile.Open(FileMode mode,FileAccess access)
        {
            return File.Open(_fullPath, mode, access);
        }

        FileStream IPhysicalFile.Open(FileMode mode,FileAccess access,FileShare share)
        {
            return File.Open(_fullPath, mode, access, share);
        }

        void IPhysicalFile.SetCreationTime(DateTime creationTime)
        {
            File.SetCreationTime(_fullPath, creationTime);
        }

        void IPhysicalFile.SetCreationTimeUtc(DateTime creationTimeUtc)
        {
            File.SetCreationTimeUtc(_fullPath, creationTimeUtc);
        }

        DateTime IPhysicalFile.GetCreationTime()
        {
            return File.GetCreationTime(_fullPath);
        }

        DateTime IPhysicalFile.GetCreationTimeUtc()
        {
            return File.GetCreationTimeUtc(_fullPath);
        }

        void IPhysicalFile.SetLastAccessTime(DateTime lastAccessTime)
        {
            File.SetLastAccessTime(_fullPath, lastAccessTime);
        }

        void IPhysicalFile.SetLastAccessTimeUtc(DateTime lastAccessTimeUtc)
        {
            File.SetLastAccessTimeUtc(_fullPath, lastAccessTimeUtc);
        }

        DateTime IPhysicalFile.GetLastAccessTime()
        {
            return File.GetLastAccessTime(_fullPath);
        }

        DateTime IPhysicalFile.GetLastAccessTimeUtc()
        {
            return File.GetLastAccessTimeUtc(_fullPath);
        }

        void IPhysicalFile.SetLastWriteTime(DateTime lastWriteTime)
        {
            File.SetLastWriteTime(_fullPath, lastWriteTime);
        }

        void IPhysicalFile.SetLastWriteTimeUtc(DateTime lastWriteTimeUtc)
        {
            File.SetLastWriteTimeUtc(_fullPath, lastWriteTimeUtc);
        }

        DateTime IPhysicalFile.GetLastWriteTime()
        {
            return File.GetLastWriteTime(_fullPath);
        }

        DateTime IPhysicalFile.GetLastWriteTimeUtc()
        {
            return File.GetLastWriteTimeUtc(_fullPath);
        }

        FileAttributes IPhysicalFile.GetAttributes()
        {
            return File.GetAttributes(_fullPath);
        }

        void IPhysicalFile.SetAttributes(FileAttributes fileAttributes)
        {
            File.SetAttributes(_fullPath, fileAttributes);
        }

        FileStream IPhysicalFile.OpenRead()
        {
            return File.OpenRead(_fullPath);
        }

        FileStream IPhysicalFile.OpenWrite()
        {
            return File.OpenWrite(_fullPath);
        }

        String IPhysicalFile.ReadAllText()
        {
            return File.ReadAllText(_fullPath);
        }

        String IPhysicalFile.ReadAllText(Encoding encoding)
        {
            return File.ReadAllText(_fullPath, encoding);
        }

        void IPhysicalFile.WriteAllText(String contents)
        {
            File.WriteAllText(_fullPath, contents);
        }

        void IPhysicalFile.WriteAllText(String contents,Encoding encoding)
        {
            File.WriteAllText(_fullPath, contents, encoding);
        }

        Byte[] IPhysicalFile.ReadAllBytes()
        {
            return File.ReadAllBytes(_fullPath);
        }

        void IPhysicalFile.WriteAllBytes(Byte[] bytes)
        {
            File.WriteAllBytes(_fullPath, bytes);
        }

        String[] IPhysicalFile.ReadAllLines()
        {
            return File.ReadAllLines(_fullPath);
        }

        String[] IPhysicalFile.ReadAllLines(Encoding encoding)
        {
            return File.ReadAllLines(_fullPath, encoding);
        }

        IEnumerable<String> IPhysicalFile.ReadLines()
        {
            return File.ReadLines(_fullPath);
        }

        IEnumerable<String> IPhysicalFile.ReadLines(Encoding encoding)
        {
            return File.ReadLines(_fullPath, encoding);
        }

        void IPhysicalFile.WriteAllLines(String[] contents)
        {
            File.WriteAllLines(_fullPath, contents);
        }

        void IPhysicalFile.WriteAllLines(String[] contents,Encoding encoding)
        {
            File.WriteAllLines(_fullPath, contents, encoding);
        }

        void IPhysicalFile.WriteAllLines(IEnumerable<String> contents)
        {
            File.WriteAllLines(_fullPath, contents);
        }

        void IPhysicalFile.WriteAllLines(IEnumerable<String> contents,Encoding encoding)
        {
            File.WriteAllLines(_fullPath, contents, encoding);
        }

        void IPhysicalFile.AppendAllText(String contents)
        {
            File.AppendAllText(_fullPath, contents);
        }

        void IPhysicalFile.AppendAllText(String contents,Encoding encoding)
        {
            File.AppendAllText(_fullPath, contents, encoding);
        }

        void IPhysicalFile.AppendAllLines(IEnumerable<String> contents)
        {
            File.AppendAllLines(_fullPath, contents);
        }

        void IPhysicalFile.AppendAllLines(IEnumerable<String> contents,Encoding encoding)
        {
            File.AppendAllLines(_fullPath, contents, encoding);
        }

        void IPhysicalFile.Move(String destFileName)
        {
            File.Move(_fullPath, destFileName);
        }

        void IPhysicalFile.Replace(String destinationFileName,String destinationBackupFileName)
        {
            File.Replace(_fullPath, destinationFileName, destinationBackupFileName);
        }

        void IPhysicalFile.Replace(String destinationFileName,String destinationBackupFileName,Boolean ignoreMetadataErrors)
        {
            File.Replace(_fullPath, destinationFileName, destinationBackupFileName, ignoreMetadataErrors);
        }

        void IPhysicalFile.Decrypt()
        {
            File.Decrypt(_fullPath);
        }

        void IPhysicalFile.Encrypt()
        {
            File.Encrypt(_fullPath);
        }
        FileInfo IPhysicalFile.FileInfo => new FileInfo(_fullPath);
    }
}

